name: Unit tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: 'Build <py:${{ matrix.python-version }},redis-py:${{ matrix.redis-py }},aioredis:${{ matrix.aioredis }},lupa:${{ matrix.lupa }},cov:${{ matrix.coverage }}>'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.7", "3.8", "3.9", "3.10" ]
        redis-py: [ "4.1.2", "4.3.4" ]
        include:
          - python-version: "3.10"
            redis-py: "2.10.6"
            aioredis: "1.3.1"
          - python-version: "3.10"
            redis-py: "3.5.3"
            aioredis: "1.3.1"
          - python-version: "3.10"
            redis-py: "4.0.1"
            aioredis: "1.3.1"
          - python-version: "3.10"
            redis-py: "4.1.2"
            aioredis: "2.0.1"
          - python-version: "3.10" # should work fine with redis.asyncio
            redis-py: "4.3.4"
            lupa: "1.13"
            coverage: yes
    services:
      redis:
        image: redis:6.2.6
        ports:
          - 6379:6379
    outputs:
      version: ${{ steps.getVersion.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          cache-dependency-path: poetry.lock
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip --quiet install poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          poetry install
          poetry run pip install redis==${{ matrix.redis-py }}
      - name: Install aioredis
        if: ${{ matrix.aioredis }}
        run: |
          poetry run pip install aioredis==${{ matrix.aioredis }}
      - name: Install lupa
        if: ${{ matrix.lupa }}
        run: |
          poetry run pip install lupa==${{ matrix.lupa }}
      - name: Get version
        id: getVersion
        shell: bash
        run: |
          VERSION=$(poetry version -s --no-ansi -n)
          echo "::set-output name=VERSION::$VERSION"
      - name: Test import
        run: |
          poetry build
          pip install dist/fakeredis-*.tar.gz
          python -c 'import fakeredis'
      - name: Test with coverage
        if: ${{ matrix.coverage == 'yes' }}
        run: |
          poetry run flake8 fakeredis/
          poetry run pytest -v --cov=fakeredis --cov-branch
          poetry run coverage json
          echo "COVERAGE=$(jq '.totals.percent_covered_display|tonumber' coverage.json)" >> $GITHUB_ENV
      - name: Test without coverage
        if: ${{ matrix.coverage != 'yes' }}
        run: |
          poetry run pytest -v
      - name: Create coverage badge
        if: ${{ matrix.coverage == 'yes' && github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: b756396efb895f0e34558c980f1ca0c7
          filename: fakeredis-py.json
          label: coverage
          message: ${{ env.COVERAGE }}%
          color: green
  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.version }}
          EOM
          )"
          echo "::notice title=New release draft::${{ needs.build.outputs.version }}"          
